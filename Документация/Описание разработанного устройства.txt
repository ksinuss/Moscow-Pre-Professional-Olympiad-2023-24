Описание разработанного устройства

Пользователь в мобильном приложении формирует заказ (выбирает определенное количество типов грузов), который по окончании работы устройства будет собран в накопителе. Затем механическая подсистема начинает процесс сканирования грузов в стеллаже. После этого идет этап распознавания типа детали. При распознавании типа детали происходит захват груза и перемещение его в накопитель. Накопитель необходим для сбора грузов из заказа. При этом предусмотрен вывод информации о распознанном грузе на внешний дисплей и в мобильном приложении.

При подключении энергопитания на устройствах (микроконтроллер и одноплатный компьютер) запускается разработанное программное обеспечение.
После начала работы программа на Raspberry ожидает получения сигнала с приложения о формировании заказа и запуске устройства.
Пользователь в мобильном приложении формирует заказ, выбирая определенные типы грузов посредством нажатия соответствующих кнопок. По окончании формирования пользователь нажимает на кнопку "Сформировать заказ", данные передаются на Raspberry. Далее пользователь нажимает на кнопку включения, сигнал передается на Raspberry. Как только заказ будет сформирован, а сигнал о включении получен, с Raspberry будет отправлен сигнал на Arduino о готовности начать работу. Будет запущена подсистема перемещения устройства. 
Для того, чтобы устройство начало перемещаться, срабатывает внутренний шаговый мотор, вращается зубчатое колесо, устройство передвигается по зубчатой рейке. При помощи датчика расстояния устройство останавливается напротив каждой ячейки с грузами и запускает процесс сканирования. Сканирование происходит на одноплатном компьютере - камера делает снимок и при помощи программного кода декодирует QR-код. Если распознанный груз есть в заказе, то информация о нем будет выведена на внешний дисплей и в мобильном приложении. 
Далее происходит захват груза: на внешний шаговой мотор передается сигнал, вращается зубчатое колесо, выдвигается захватное устройство; по тому же сигналу на второй Arduino запускается сервопривод, работает и приводит в движение зубчатые элементы лапки, тем самым захватывая груз; захватное устройство возвращается в исходное положение. При помощи датчика расстояния система запоминает расположение ячейки для того, чтобы после сброса груза в накопитель, вернуться на место последнего сканирования. После происходит перемещение груза в накопитель: начинает работать внутренний шаговый мотор, перемещаясь к накопителю до того момента, пока датчик на первой Arduino не получит нужное значение; захватное устройство выдвигается; на второй Arduino также работает датчик расстояния, и после получения нужного значения подается сигнал на сервопривод, с помощью сервопривода лапки разжимаются, отдавая груз во власть земного притяжения. 
Каретка возвращается на место последнего распознавания и продолжает сканирование. Устройство будет перемещаться и сканировать грузы до тех пор, пока весь заказ не будет собран.
Пользователь может изменить содержимое заказа через мобильное приложение в процессе работы устройства. Данные о новом заказе передаются в систему и устройство сканирует грузы, пока заказ не будет полностью собран.
По завершении работы программы, пользователь в приложении нажимает на кнопку выключения устройства. На Raspberry передается сигнал о выключении, а с Raspberry - на Arduino. Тем самым, завершается работа подсистемы сканирования и подсистемы перемещения каретки.

Для управления сервоприводом используется встроенная библиотека Servo.
Для управления шаговыми моторами был создан класс Stepper с функциями Stepper.step.
Для использования датчика расстояния используется специально разработанная функция kabanchik для считывания измерений с УЗД и преобразования их из сигналов в привычное для нас расстояние (в см). Датчик помогает устройству перемещаться и останавливаться точно напротив ячеек с грузами и накопителя.
Для управления внешним дисплеем используется библиотека OLED_I2C.
